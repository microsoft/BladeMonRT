// Code generated by MockGen. DO NOT EDIT.
// Source: ./nodes/dummy_node_b/dummy_node_b.go

// Package dummy_node_b is a generated GoMock package.
package dummy_node_b

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nodes "github.com/microsoft/BladeMonRT/nodes"
)

// MockInterfaceDummyNodeB is a mock of InterfaceDummyNodeB interface.
type MockInterfaceDummyNodeB struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceDummyNodeBMockRecorder
}

// MockInterfaceDummyNodeBMockRecorder is the mock recorder for MockInterfaceDummyNodeB.
type MockInterfaceDummyNodeBMockRecorder struct {
	mock *MockInterfaceDummyNodeB
}

// NewMockInterfaceDummyNodeB creates a new mock instance.
func NewMockInterfaceDummyNodeB(ctrl *gomock.Controller) *MockInterfaceDummyNodeB {
	mock := &MockInterfaceDummyNodeB{ctrl: ctrl}
	mock.recorder = &MockInterfaceDummyNodeBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceDummyNodeB) EXPECT() *MockInterfaceDummyNodeBMockRecorder {
	return m.recorder
}

// GetPredecessorNodes mocks base method.
func (m *MockInterfaceDummyNodeB) GetPredecessorNodes(interfaceNode nodes.InterfaceNode, workflowContext *nodes.WorkflowContext) []nodes.InterfaceNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredecessorNodes", interfaceNode, workflowContext)
	ret0, _ := ret[0].([]nodes.InterfaceNode)
	return ret0
}

// GetPredecessorNodes indicates an expected call of GetPredecessorNodes.
func (mr *MockInterfaceDummyNodeBMockRecorder) GetPredecessorNodes(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredecessorNodes", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).GetPredecessorNodes), interfaceNode, workflowContext)
}

// GetPredecessorNodesResults mocks base method.
func (m *MockInterfaceDummyNodeB) GetPredecessorNodesResults(interfaceNode nodes.InterfaceNode, workflowContext *nodes.WorkflowContext) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredecessorNodesResults", interfaceNode, workflowContext)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetPredecessorNodesResults indicates an expected call of GetPredecessorNodesResults.
func (mr *MockInterfaceDummyNodeBMockRecorder) GetPredecessorNodesResults(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredecessorNodesResults", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).GetPredecessorNodesResults), interfaceNode, workflowContext)
}

// GetResult mocks base method.
func (m *MockInterfaceDummyNodeB) GetResult(interfaceNode nodes.InterfaceNode, workflowContext *nodes.WorkflowContext) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", interfaceNode, workflowContext)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockInterfaceDummyNodeBMockRecorder) GetResult(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).GetResult), interfaceNode, workflowContext)
}

// Process mocks base method.
func (m *MockInterfaceDummyNodeB) Process(interfaceNode nodes.InterfaceNode, workflowContext *nodes.WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", interfaceNode, workflowContext)
}

// Process indicates an expected call of Process.
func (mr *MockInterfaceDummyNodeBMockRecorder) Process(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).Process), interfaceNode, workflowContext)
}

// ProcessVirt mocks base method.
func (m *MockInterfaceDummyNodeB) ProcessVirt(workflowContext *nodes.WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessVirt", workflowContext)
}

// ProcessVirt indicates an expected call of ProcessVirt.
func (mr *MockInterfaceDummyNodeBMockRecorder) ProcessVirt(workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessVirt", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).ProcessVirt), workflowContext)
}

// SaveResult mocks base method.
func (m *MockInterfaceDummyNodeB) SaveResult(interfaceNode nodes.InterfaceNode, workflowContext *nodes.WorkflowContext, result interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveResult", interfaceNode, workflowContext, result)
}

// SaveResult indicates an expected call of SaveResult.
func (mr *MockInterfaceDummyNodeBMockRecorder) SaveResult(interfaceNode, workflowContext, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResult", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).SaveResult), interfaceNode, workflowContext, result)
}

// result mocks base method.
func (m *MockInterfaceDummyNodeB) result() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "result")
	ret0, _ := ret[0].(string)
	return ret0
}

// result indicates an expected call of result.
func (mr *MockInterfaceDummyNodeBMockRecorder) result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "result", reflect.TypeOf((*MockInterfaceDummyNodeB)(nil).result))
}
