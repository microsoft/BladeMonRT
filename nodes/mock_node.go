// Code generated by MockGen. DO NOT EDIT.
// Source: ./nodes/node.go

// Package nodes is a generated GoMock package.
package nodes

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceNode is a mock of InterfaceNode interface.
type MockInterfaceNode struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceNodeMockRecorder
}

// MockInterfaceNodeMockRecorder is the mock recorder for MockInterfaceNode.
type MockInterfaceNodeMockRecorder struct {
	mock *MockInterfaceNode
}

// NewMockInterfaceNode creates a new mock instance.
func NewMockInterfaceNode(ctrl *gomock.Controller) *MockInterfaceNode {
	mock := &MockInterfaceNode{ctrl: ctrl}
	mock.recorder = &MockInterfaceNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceNode) EXPECT() *MockInterfaceNodeMockRecorder {
	return m.recorder
}

// GetResult mocks base method.
func (m *MockInterfaceNode) GetResult(interfaceNode InterfaceNode, workflowContext *WorkflowContext) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult", interfaceNode, workflowContext)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockInterfaceNodeMockRecorder) GetResult(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockInterfaceNode)(nil).GetResult), interfaceNode, workflowContext)
}

// Process mocks base method.
func (m *MockInterfaceNode) Process(interfaceNode InterfaceNode, workflowContext *WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process", interfaceNode, workflowContext)
}

// Process indicates an expected call of Process.
func (mr *MockInterfaceNodeMockRecorder) Process(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockInterfaceNode)(nil).Process), interfaceNode, workflowContext)
}

// getPredecessorNodes mocks base method.
func (m *MockInterfaceNode) getPredecessorNodes(interfaceNode InterfaceNode, workflowContext *WorkflowContext) []InterfaceNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPredecessorNodes", interfaceNode, workflowContext)
	ret0, _ := ret[0].([]InterfaceNode)
	return ret0
}

// getPredecessorNodes indicates an expected call of getPredecessorNodes.
func (mr *MockInterfaceNodeMockRecorder) getPredecessorNodes(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPredecessorNodes", reflect.TypeOf((*MockInterfaceNode)(nil).getPredecessorNodes), interfaceNode, workflowContext)
}

// getPredecessorNodesResults mocks base method.
func (m *MockInterfaceNode) getPredecessorNodesResults(interfaceNode InterfaceNode, workflowContext *WorkflowContext) []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPredecessorNodesResults", interfaceNode, workflowContext)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// getPredecessorNodesResults indicates an expected call of getPredecessorNodesResults.
func (mr *MockInterfaceNodeMockRecorder) getPredecessorNodesResults(interfaceNode, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPredecessorNodesResults", reflect.TypeOf((*MockInterfaceNode)(nil).getPredecessorNodesResults), interfaceNode, workflowContext)
}

// processVirt mocks base method.
func (m *MockInterfaceNode) processVirt(workflowContext *WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "processVirt", workflowContext)
}

// processVirt indicates an expected call of processVirt.
func (mr *MockInterfaceNodeMockRecorder) processVirt(workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processVirt", reflect.TypeOf((*MockInterfaceNode)(nil).processVirt), workflowContext)
}

// saveResult mocks base method.
func (m *MockInterfaceNode) saveResult(interfaceNode InterfaceNode, workflowContext *WorkflowContext, result interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "saveResult", interfaceNode, workflowContext, result)
}

// saveResult indicates an expected call of saveResult.
func (mr *MockInterfaceNodeMockRecorder) saveResult(interfaceNode, workflowContext, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveResult", reflect.TypeOf((*MockInterfaceNode)(nil).saveResult), interfaceNode, workflowContext, result)
}
