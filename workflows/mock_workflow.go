// Code generated by MockGen. DO NOT EDIT.
// Source: ./workflow.go

// Package workflows is a generated GoMock package.
package workflows

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nodes "github.com/microsoft/BladeMonRT/nodes"
)

// MockInterfaceWorkflow is a mock of InterfaceWorkflow interface.
type MockInterfaceWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceWorkflowMockRecorder
}

// MockInterfaceWorkflowMockRecorder is the mock recorder for MockInterfaceWorkflow.
type MockInterfaceWorkflowMockRecorder struct {
	mock *MockInterfaceWorkflow
}

// NewMockInterfaceWorkflow creates a new mock instance.
func NewMockInterfaceWorkflow(ctrl *gomock.Controller) *MockInterfaceWorkflow {
	mock := &MockInterfaceWorkflow{ctrl: ctrl}
	mock.recorder = &MockInterfaceWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceWorkflow) EXPECT() *MockInterfaceWorkflowMockRecorder {
	return m.recorder
}

// AddNode mocks base method.
func (m *MockInterfaceWorkflow) AddNode(node nodes.InterfaceNode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", node)
}

// AddNode indicates an expected call of AddNode.
func (mr *MockInterfaceWorkflowMockRecorder) AddNode(node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockInterfaceWorkflow)(nil).AddNode), node)
}

// GetNodes mocks base method.
func (m *MockInterfaceWorkflow) GetNodes() []nodes.InterfaceNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].([]nodes.InterfaceNode)
	return ret0
}

// GetNodes indicates an expected call of GetNodes.
func (mr *MockInterfaceWorkflowMockRecorder) GetNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockInterfaceWorkflow)(nil).GetNodes))
}

// Run mocks base method.
func (m *MockInterfaceWorkflow) Run(interfaceWorkflow InterfaceWorkflow, workflowContext *nodes.WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", interfaceWorkflow, workflowContext)
}

// Run indicates an expected call of Run.
func (mr *MockInterfaceWorkflowMockRecorder) Run(interfaceWorkflow, workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterfaceWorkflow)(nil).Run), interfaceWorkflow, workflowContext)
}

// runVirt mocks base method.
func (m *MockInterfaceWorkflow) runVirt(workflowContext *nodes.WorkflowContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "runVirt", workflowContext)
}

// runVirt indicates an expected call of runVirt.
func (mr *MockInterfaceWorkflowMockRecorder) runVirt(workflowContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "runVirt", reflect.TypeOf((*MockInterfaceWorkflow)(nil).runVirt), workflowContext)
}
