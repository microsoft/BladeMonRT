// Code generated by MockGen. DO NOT EDIT.
// Source: ./workflow_scheduler.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workflows "github.com/microsoft/BladeMonRT/workflows"
)

// MockWorkflowSchedulerInterface is a mock of WorkflowSchedulerInterface interface.
type MockWorkflowSchedulerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowSchedulerInterfaceMockRecorder
}

// MockWorkflowSchedulerInterfaceMockRecorder is the mock recorder for MockWorkflowSchedulerInterface.
type MockWorkflowSchedulerInterfaceMockRecorder struct {
	mock *MockWorkflowSchedulerInterface
}

// NewMockWorkflowSchedulerInterface creates a new mock instance.
func NewMockWorkflowSchedulerInterface(ctrl *gomock.Controller) *MockWorkflowSchedulerInterface {
	mock := &MockWorkflowSchedulerInterface{ctrl: ctrl}
	mock.recorder = &MockWorkflowSchedulerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowSchedulerInterface) EXPECT() *MockWorkflowSchedulerInterfaceMockRecorder {
	return m.recorder
}

// addWinEventBasedSchedule mocks base method.
func (m *MockWorkflowSchedulerInterface) addWinEventBasedSchedule(workflow workflows.InterfaceWorkflow, eventQueries []WinEventSubscribeQuery) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addWinEventBasedSchedule", workflow, eventQueries)
}

// addWinEventBasedSchedule indicates an expected call of addWinEventBasedSchedule.
func (mr *MockWorkflowSchedulerInterfaceMockRecorder) addWinEventBasedSchedule(workflow, eventQueries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addWinEventBasedSchedule", reflect.TypeOf((*MockWorkflowSchedulerInterface)(nil).addWinEventBasedSchedule), workflow, eventQueries)
}
